<launch>

    <arg name="launch_driver" default="true" />

    <!-- LiDAR Driver -->
    <group ns="sensor">
        <group ns="lidar">
            <group ns="main">
                <arg name="sensor_frame" default="velodyne" />
                <arg name="base_frame" default="base_link" />
                <arg name="manager" default="$(arg sensor_frame)_nodelet_manager" />
  
                <node pkg="nodelet" type="nodelet" name="$(arg manager)" args="manager" />

                <include file="$(find velodyne_pointcloud)/launch/VLP-32C_points.launch">
                  <arg name="launch_driver" value="$(arg launch_driver)" />
                  <arg name="frame_id" value="$(arg sensor_frame)" />
                  <arg name="manager" value="$(arg manager)" />
                </include>

                <node pkg="nodelet" type="nodelet" name="crop_box_filter_self" args="load pointcloud_preprocessor/crop_box_filter_nodelet $(arg manager)" output="log">
                    <remap from="~input" to="velodyne_points_ex" />
                    <remap from="~output" to="velodyne_points_ex/self_cropped" />
                    <remap from="~min_x" to="/vehicle_info/min_longitudinal_offset" />
                    <remap from="~max_x" to="/vehicle_info/max_longitudinal_offset" />
                    <remap from="~min_y" to="/vehicle_info/min_lateral_offset" />
                    <remap from="~max_y" to="/vehicle_info/max_lateral_offset" />
                    <remap from="~min_z" to="/vehicle_info/min_height_offset" />
                    <remap from="~max_z" to="/vehicle_info/max_height_offset" />

                    <param name="negative" value="True" />
                    <param name="input_frame" value="$(arg base_frame)" />
                    <param name="output_frame" value="$(arg base_frame)" />
                </node>

                <remap from="velodyne_points_ex" to="velodyne_points_ex/self_cropped" />    
                <remap from="velodyne_points_interpolate" to="pointcloud" />
                <include file="$(find velodyne_pointcloud)/launch/interpolate_nodelet.launch">
                </include>

            </group>
        </group>
    </group>

    <!-- Camera Driver -->
    <!-- <node pkg="uvc_camera" name="camera" type="uvc_camera_node" output="screen">
        <param name="device" type="string" value="/dev/video2"/>
        <param name="width" type="int" value="640"/>
        <param name="height" type="int" value="480"/>
        <param name="pixel_format" value="mjpeg"/>
        <param name="io_method" value="mmap"/>
        <param name="frame_id" value="front_camera/camera_optical_frame"/>
        <param name="camera_info_url" type="string" value="file://$(find sensor_launch)/data/camera.yaml"/>
    </node> -->

    <group ns="sensing">
        <group ns="preprocess">
            <!-- PointCloud Preprocessor -->
            <include file="$(find pointcloud_preprocessor)/launch/preprocessor.launch">
                <arg name="input_points_raw0" default="/sensor/lidar/main/pointcloud" />
                <arg name="input_points_raw1" default="" />
                <arg name="input_points_raw2" default="" />
                <arg name="input_points_raw3" default="" />
                <arg name="input_points_raw4" default="" />
                <arg name="input_points_raw5" default="" />
                <arg name="input_points_raw6" default="" />
                <arg name="input_points_raw7" default="" />
                <arg name="input_points_number" default="1" />
                <arg name="output_points_raw" default="lidar/mesurement_range" />
            </include>
            <!-- PointCloud Ground Filter -->
            <node pkg="pointcloud_preprocessor" type="ray_ground_filter_node" name="ray_ground_filter" output="screen">
                <remap from="~input" to="pointcloud_preprocessor/lidar/mesurement_range" />
                <remap from="~output" to="lidar/no_ground/pointcloud_raw" />
            </node>
            <!-- PointCloud Outlier Filter -->
            <node pkg="pointcloud_preprocessor" type="voxel_grid_outlier_filter_node" name="voxel_grid_outlier_filter" output="screen">
                <remap from="~input" to="lidar/no_ground/pointcloud_raw" />
                <remap from="~output" to="lidar/no_ground/pointcloud" />
                <rosparam>
                    voxel_size_x: 0.3
                    voxel_size_y: 0.3
                    voxel_size_z: 0.5
                    voxel_points_threshold: 2
                </rosparam>
            </node>
        </group>
    </group>
</launch>