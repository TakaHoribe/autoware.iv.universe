<?xml version="1.0" encoding="UTF-8" ?>
<launch>

    <arg name="points_src" default="/localization/util/crop_self" />
    <arg name="points_src_apollo" default="/sensor/lidar/main/velodyne_points" />

    <!-- publish camera info -->
    <include file="$(find yaml_to_camerainfo)/launch/yaml_to_camera.launch" />

    <!-- for publishing camera raw -->
    <node name="raw_img_republish" pkg="image_transport" type="republish" args="compressed raw">
        <remap from="in" to="/front_camera/image" />
        <remap from="out" to="/tmp_img" />
    </node>

    <!-- wrapper of lg simulator -->
    <node pkg="lgsvl_connector" type="lgsvl_connect_publisher.py" name="lgsvl_connect" output="screen"></node>

    <!-- relay topic -->
    <node name="pcl_relay" pkg="topic_tools" type="relay" args="/points_raw_tmp /sensor/lidar/main/velodyne_points_ex" />
    <node name="pose_relay" pkg="topic_tools" type="relay" args="/vehicle/status/twist /current_velocity" />
    <node name="camera_relay" pkg="topic_tools" type="relay" args="/tmp_img_lgsvl /sensor/camera/traffic_light/image_raw" />

    <!-- publish base_link-centered and self-cropped pcl. (substitute for velodyne nodelet manager) -->
    <node pkg="pointcloud_preprocessor" type="passthrough_filter_node" name="passthrough_filter_for_apollo">
        <remap from="~input" to="$(arg points_src)" />
        <remap from="~output" to="$(arg points_src_apollo)" />
        <rosparam>
          output_frame: velodyne
          input_frame: base_link
        </rosparam>
    </node>

</launch>