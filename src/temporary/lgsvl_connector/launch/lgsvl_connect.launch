<?xml version="1.0" encoding="UTF-8" ?>
<launch>

    <!-- publish camera info -->
    <include file="$(find yaml_to_camerainfo)/launch/yaml_to_camera.launch" />

    <!-- for publishing camera raw -->
    <node name="raw_img_republish" pkg="image_transport" type="republish" args="compressed raw">
        <remap from="in" to="/front_camera/image" />
        <remap from="out" to="/tmp_img" />
    </node>

    <!-- wrapper of lg simulator -->
    <node pkg="lgsvl_connector" type="lgsvl_connect_publisher.py" name="lgsvl_connect" output="screen"></node>

    <!-- relay topic -->
    <!-- <node name="pcl_relay" pkg="topic_tools" type="relay" args="/points_raw_tmp /sensing/lidar/top/pointcloud_raw_ex" /> -->
    <node name="pose_relay" pkg="topic_tools" type="relay" args="/vehicle/status/twist /current_velocity" />
    <node name="camera_relay" pkg="topic_tools" type="relay" args="/tmp_img_lgsvl /sensing/camera/traffic_light/image_raw" />

    <!-- self-cropped -->
    <node pkg="pointcloud_preprocessor" type="crop_box_filter_node" name="crop_box_filter_self" output="log">
        <remap from="~input" to="/points_raw_tmp" />
        <remap from="~output" to="/sensing/lidar/top/pointcloud_raw_ex" />
        <rosparam>
            min_x: -5.0
            max_x: 5.0
            min_y: -2.0
            max_y: 2.0
            min_z: -100.0
            max_z: 100.0
            negative: True
        </rosparam>
        <param name="input_frame" value="velodyne_top" />
        <param name="output_frame" value="velodyne_top" />
    </node>

</launch>