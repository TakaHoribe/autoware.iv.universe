<launch>

  <!-- Topics -->
  <arg name="input_crop_sensor_points_topic" default="velodyne_points_transed" doc="Sensor points topic"/>
  <arg name="input_passthrough_sensor_points_topic" default="points_raw/crop" doc="Sensor points topic"/>
  <arg name="input_downsample_sensor_points_topic" default="points_raw/pass" doc="Sensor points topic"/>
  <arg name="input_ndt_sensor_points_topic" default="points_raw/downsample" doc="Sensor points topic"/>


  <arg name="input_sensor_points_queue_size" default="1" doc="Subscriber queue size" />
  <arg name="input_initial_pose_topic" default="/ekf_pose_with_covariance" doc="Initial position topic to align" />
  <arg name="input_map_points_topic" default="/pointcloud_map" doc="Map points topic" />

  <arg name="output_pose_topic" default="ndt_pose" doc="Estimated self position" />
  <arg name="output_pose_with_covariance_topic" default="ndt_pose_with_covariance" doc="Estimated self position with covariance" />

  <!-- tf -->
  <arg name="base_frame" default="base_link" doc="Location of output results (ndt_pose, ndt_pose_with_covariance)" />


  <!-- NDT Params -->
  <arg name="trans_epsilon" default="0.01" doc="The maximum difference between two consecutive transformations in order to consider convergence" />
  <arg name="step_size" default="0.1" doc="The newton line search maximum step length" />
  <arg name="resolution" default="2.0" doc="The ND voxel grid resolution" />
  <arg name="max_iterations" default="30.0" doc="The number of iterations required to calculate alignment" />

  <arg name="use_anonymous_node_name" default="false" doc="If True, launch with anonymous option" />
  <arg name="node_name" value="ndt_scan_matcher" unless="$(arg use_anonymous_node_name)" doc="Not use anonymous option" />
  <arg name="node_name" value="$(anon ndt_scan_matcher)" if="$(arg use_anonymous_node_name)" doc="Use anonymous option" />

  <!-- crop box filter -->
  <node pkg="pointcloud_preprocessor" type="crop_box_filter_node" name="crop_box_filter" output="log">
      <remap from="~input" to="$(arg input_crop_sensor_points_topic)" />
      <remap from="~output" to="$(arg input_passthrough_sensor_points_topic)" />
      <rosparam>
        min_x: -1.0
        max_x: 5.0
        min_y: -1.50
        max_y: 1.50
        min_z: -100.0 
        max_z: 100.0
        negative: True
      </rosparam>
      <param name="input_frame" value="$(arg base_frame)" />
      <param name="output_frame" value="$(arg base_frame)" />
  </node>

  <node pkg="pointcloud_preprocessor" type="crop_box_filter_node" name="crop_box_filter2" output="log">
      <remap from="~input" to="$(arg input_passthrough_sensor_points_topic)" />
      <remap from="~output" to="$(arg input_downsample_sensor_points_topic)" />
      <rosparam>
        min_x: -100.0
        max_x: 100.0
        min_y: -100.0
        max_y: 100.0
        min_z: -100.0
        max_z: 100.0
        negative: False
      </rosparam>
      <param name="input_frame" value="$(arg base_frame)" />
      <param name="output_frame" value="$(arg base_frame)" />
  </node>


  <!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
  <node pkg="pointcloud_preprocessor" type="voxel_grid_downsample_filter_node" name="voxel_grid_filter" output="log">
    <remap from="~input" to="$(arg input_downsample_sensor_points_topic)" />
    <remap from="~output" to="$(arg input_ndt_sensor_points_topic)" />
    <rosparam>
      voxel_size_x: 3.0
      voxel_size_y: 3.0
      voxel_size_z: 3.0
    </rosparam>
  </node>

  <node pkg="ndt_scan_matcher" type="ndt_scan_matcher" name="$(arg node_name)" output="screen">

    <remap from="points_raw" to="$(arg input_ndt_sensor_points_topic)" />
    <param name="input_sensor_points_queue_size" value="$(arg input_sensor_points_queue_size)" />

    <remap from="ekf_pose" to="$(arg input_initial_pose_topic)" />
    <remap from="points_map" to="$(arg input_map_points_topic)" />

    <param name="base_frame" value="$(arg base_frame)" />

    <param name="trans_epsilon" value="$(arg trans_epsilon)" />
    <param name="step_size" value="$(arg step_size)" />
    <param name="resolution" value="$(arg resolution)" />
    <param name="max_iterations" value="$(arg max_iterations)" />

  </node>

</launch>
