<launch> 
  <arg name="input_path_topic" default="/planning/behavior_planning/path" />
  <!-- <arg name="enable_velocity_based_cropping" default="false"/>
  <arg name="time_for_calculating_velocity_based_distance" default="5"/>
  <arg name="distance_for_cropping" default="-3"/>
  <node pkg="motion_planner" type="eb_path_planner_node" name="trajectory_planner" output="screen">
    <remap from="~input/path" to="$(arg input_path_topic)" />
    <remap from="~output/path" to="trajectory" />
    <param name="enable_velocity_based_cropping" value="$(arg enable_velocity_based_cropping)" />
    <param name="time_for_calculating_velocity_based_distance" value="$(arg time_for_calculating_velocity_based_distance)" />
    <param name="distance_for_cropping" value="$(arg distance_for_cropping)" />
  </node> -->
  <node pkg="motion_planner" type="path2trajectory_converter_node" name="path2trajecotry_converter_node" output="screen">
    <remap from="~input/path" to="$(arg input_path_topic)" />
    <remap from="~output/path" to="path_planner/trajectory" />
  </node>

  <!-- stop velocity planning with obstacle pointcloud info -->
  <node pkg="stop_planner" type="stop_planner" name="stop_planner" output="log">
    <remap from="~input/trajectory" to="path_planner/trajectory" />
    <remap from="~input/point_cloud" to="/points_raw/outlier/filtered" />
    <remap from="~output/trajectory" to="stop_planner/trajectory" />
  </node>

  <!-- velocity planning with max velocity, acceleration, jerk, stop point constraint -->
  <group>
    <remap from="~/input/trajectory" to="stop_planner/trajectory"/>
    <remap from="~/output/trajectory" to="trajectory"/>
    <include file="$(find velocity_planner)/launch/velocity_planner.launch"/>
  </group>

</launch>